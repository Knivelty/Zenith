import { hash } from "starknet";
import * as fs from "fs/promises";
import * as path from "path";

function generateHash(address: string): string {
    // Convert address to decimal if it's in hex format
    const addressBN = BigInt(address);
    return hash.computeHashOnElements([addressBN.toString()]).toString();
}

async function readAddresses(): Promise<string[]> {
    const addressFile = path.join(process.cwd(), "script/whitelist-addresses.txt");
    const content = await fs.readFile(addressFile, "utf8");
    
    return content
        .split("\n")
        .map(line => line.trim())
        .filter(line => line && !line.startsWith("#")); // Remove empty lines and comments
}

async function main() {
    const walletAddresses = await readAddresses();
    
    if (walletAddresses.length === 0) {
        console.log("Please add wallet addresses to script/whitelist-addresses.txt");
        console.log("Each address should be on a new line");
        console.log("Lines starting with # are treated as comments");
        return;
    }

    const hashes = walletAddresses.map((address) => ({
        address,
        hash: generateHash(address),
    }));

    // Create the whitelist file content
    const whitelistContent = `// This file is auto-generated by generateWhitelistHashes.ts
// DO NOT EDIT DIRECTLY

export const whitelistedHashes: string[] = [
${hashes.map((item) => `    "${item.hash}", // ${item.address}`).join("\n")}
];
`;

    // Save to utils directory
    const outputFile = path.join(process.cwd(), "src/utils/whitelist.generated.ts");
    await fs.writeFile(outputFile, whitelistContent, "utf8");

    // Print summary
    console.log("Generated hashes for", hashes.length, "addresses");
    if (hashes.length > 0) {
        console.log("\nSample output:");
        console.log("Address:", hashes[0].address);
        console.log("Hash:", hashes[0].hash);
    }
    console.log("\nWhitelist saved to:", outputFile);
}

main().catch(console.error);
